topset: null # All instances will be a subset of `topset`;
# >> Example:
# topset:
#   core.MaxPool2d:
#     in_dtypes: [["f32"], ["f64"]]
#     out_dtypes: [["f32"], ["f64"]]
#   core.Where:
#     in_dtypes: [["bool", "f32", "f32"]]
#     out_dtypes: [["f32"]]

exclude: null
# >> Example:
# exclude:
#   - core.MaxPool2d:
#     in_dtypes: [["f32"], ["f64"]]
#     out_dtypes: [["f32"], ["f64"]]
#   - core.Where:
#     in_dtypes: [["bool", "f32", "f32"]]
#     out_dtypes: [["f32"]]

topset_from_file: null # Path that contains a YAML file that contains a topset domain as above

# model gen config
model:
  type: null
  path: "???" # can be multiple files tho.

mgen: # model gen.
  max_nodes: 5
  timeout_ms: 10000
  vulops: False
  method: "symbolic"
  save: "nnsmith_output"
  seed: null
  max_elem_per_tensor: 65536 # 2^16

# backend config
backend:
  type: null
  optmax: true
  target: "cpu"

cache:
  topset: true # Run dtype test with automatically maintained cache

debug:
  viz: false
  viz_fmt: "png" # or "svg" for much smaller figure size and precision;

fuzz:
  time: 14400
  root: "???"
  seed: null
  crash_safe: false
  test_timeout: null
  save_test: null

filter:
  type: [ ]
  patch: [ ]

cmp:
  equal_nan: true # skip regarding it as a bug if with fp exception values.

  raw_input: null # path to raw input data (Dict[str, np.ndarray])

  oracle: "auto"
  # "auto": use `oracle.pkl` in local path;
  # PathLike: get the oracle from somewhere else;
  # null: fallback to random.

  with:
    type: null
    optmax: true
    target: "cpu"

  seed: null
  bug_presence: "report" # or "crash"
  save: null # path to save the bug report if `bug_presence` is "report"

defaults:
  - override hydra/job_logging: file
  - override hydra/hydra_logging: colorlog
